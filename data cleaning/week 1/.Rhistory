library(rClr)
#' mdx query with two placeholders:
#'  - reporting date (format: YYYYMMDD)
#'  - book (e.g. S_NOR_OIL)
mdx <- "SELECT
NON EMPTY(
{[Measures].[GREEK VALUE CU], [Measures].[GREEK VALUE RC] }
) ON 0,
NON EMPTY(
{[GREEKS].[GREEK TYPE].&[2], [GREEKS].[GREEK TYPE].&[3], [GREEKS].[GREEK TYPE].&[4]}
*[CURVE].[CURVE].[CURVE]*[TIME BUCKET].[MONTH].[MONTH]
*[GRIDPOINT].[GRIDPOINT PERIOD].[GRIDPOINT PERIOD]*[UNIT].[UNIT].[UNIT]
*[ASSET].[START DATE].[START DATE]*[ASSET].[END DATE].[END DATE]
) ON 1
FROM [ARP]
WHERE (
[REPORTING DATE].[REPORTING DATE].&[%s],
[BOOK].[BOOK].&[%s]
) CELL PROPERTIES value, format_string, language, back_color, fore_color,
font_flags"
# connect to ARP.
# you need to adjust the path such that it points to OLAP.dll
clrLoadAssembly('OLAP\\OLAP.dll')
cnn <- "Provider=MSOLAP;Character Encoding=UTF-8;Integrated Security=SSPI;Persist Security Info=True;Initial Catalog=ARP;Data Source=arp.prod.axponet.ch\\olap;MDX Compatibility=1;Safety Options=2;MDX Missing Member Mode=Ignore;Update Isolation Level=2;"
OLAP <- clrNew('OLAP.OLAP') # instantiate an object
if(FALSE == clrCall(OLAP, 'Connect', cnn)) { # call Connect method
stop(paste0("ERROR: cannot connect to ARP."))
}
## ARP: get Risk Factors and Greeks
query <- sprintf(mdx, "20170911", "MGMT_ORI_VOL") # set-up query with reportingDate and book
result <- clrCall(OLAP, 'ExecuteMDXQuery2D', query) # execute query
## parse MDX query
mdx_response <- read.table(text=result, sep=";", stringsAsFactors=FALSE) # columns: greek type; Endur curve name; time bucket; start date; end date; period; currency; unit
names(mdx_response) <- c("GreekType", # delta, gamma or vega
"EndurCurve", # Endur curve name (e.g. BEL_EL_Month_Base.EUR)
"TimeBucketMonth", # YYYY/08 (e.g. 2017/10); ONLY NEEDED FOR DELTAS!
"GridpointPeriod", # M_2017_10 or whatever. This column is only needed to cross check the TimeBucketMonth
"Unit", # contract unit; e.g. MWh, Therms, etc.
"StartDate", # contract's start date; DD.MM.YYYY; ONLY NEEDED FOR GAMMAS AND VEGAS!
"EndDate", # contract's end date; DD.MM.YYYY; ONLY NEEDED FOR GAMMAS AND VEGAS!
"GreekCU", # value of the greek in CONTRACT CURRENCY
"GreekEUR") # value of the greek in REPORTING CURRENCY; NOT NEEDED!
install.packages('rclr')
install.packages('rClr')
install.packages('C:\Users\cathgold\R\win-library\3.2\rClr_0.7-4.tar.gz')
install.packages('C:\\Users\\cathgold\\R\\win-library\\3.2\\rClr_0.7-4.tar.gz')
install.packages('rClr')
library('rclr')
library('rClr')
library('rClr')
library('rClr')
getwd
getwd()
read.csv("mydata.csv")
dir()
setwd("C:/dev/play/datasciencecoursera/data cleaning/week 1")
read.csv("data.csv")
data <- read.csv("data.csv")
data[, $val]
data$VAL
cleaned <- data[!is.na(data$VAL)]
cleaned <- data[!is.na(data$VAL), ]
cleaned$VAL
cleaned[cleaned$VAL = 24]
cleaned[cleaned$VAL == 24]
cleaned[cleaned$VAL == 24, ]
nrow(cleaned[cleaned$VAL == 24, ])
unique(data$FES)
read.csv("NGAP.xlsx")
read.xlsx("NGAP.xlsx")
library(xlsx)
library("xlsx")
install.packages("xlsx")
read.xlsx("NGAP.xlsx")
library("xlsx")
read.xlsx("NGAP.xlsx")
read.xlsx("NGAP.xlsx", sheetIndex = 1)
read.xlsx("NGAP.xlsx", sheetIndex = 1, startRow = 18, endRow = 23, colIndex = 7:15)
test <- read.xlsx("NGAP.xlsx", sheetIndex = 1, startRow = 18, endRow = 23, colIndex = 7:15)
dat <- read.xlsx("NGAP.xlsx", sheetIndex = 1, startRow = 18, endRow = 23, colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
library("xml")
install.packages("xml")
install.packages("XML")
library("xml")
library("XML")
xml <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml <- xmlParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml
xpathSApply(xml, "reponse/row/row/zipcode")
t <- xpathSApply(xml, "reponse/row/row/zipcode")
t <- xpathSApply(xml, "//reponse/row/row/zipcode")
t <- xpathSApply(xml, "//reponse")
xml
t <- xpathSApply(xml, "//reponse")
t <- xpathSApply(xml, "//response")
t <- xpathSApply(xml, "//response/row/row")
t <- xpathSApply(xml, "//response/row/row/zipcode")
t <- xpathSApply(xml, "//response/row/row/zipcode", simplify = true)
t <- xpathSApply(xml, "//response/row/row/zipcode", simplify = True)
t <- xpathSApply(xml, "//response/row/row/zipcode", simplify = TRUE)
t <- xpathSApply(xml, "//response/row/row/zipcode")
t <- xpathSApply(xml, "//response/row/row/zipcode", xmlValue)
t[t == "21231"]
nrow(t[t == "21231"])
length(t[t == "21231"])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
date()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "commSurvey.csv")
fread("commSurvey.csv")
install.packages("data.frame")
library(data.frame")
library("data.frame")
install.packages("data.table")
fread("commSurvey.csv")
library("data.table")
fread("commSurvey.csv")
tb <- fread("commSurvey.csv")
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
DT <- fread("commSurvey.csv")
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time("rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
DT[,mean(pwgtp15),by=SEX]
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages("httr")
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
0
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "3a7a1562fc9e6521287e",
secret = "0a310ece86fd411859ecc746240aaeb675d275ba")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
# req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
# stop_for_status(req)
# content(req)
install.packages("rvest")
library("rvest")
rvest::html("http://biostat.jhsph.edu/~jleek/contact.html")
x <- rvest::html("http://biostat.jhsph.edu/~jleek/contact.html")
nrows(x)
nrow(x)
x
html_text("http://biostat.jhsph.edu/~jleek/contact.html")
read_html("http://biostat.jhsph.edu/~jleek/contact.html")
class(read_html("http://biostat.jhsph.edu/~jleek/contact.html"))
html_text("http://biostat.jhsph.edu/~jleek/contact.html")
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"))
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = .)
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = html)
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "html")
html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "html"))
html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = ""))
html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html"))
str(nchar)
class(html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html")))
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html"))
strsplit(text, '\r\n')
strsplit(text, '\n')
split <- strsplit(text, '\n')
nchar(split[10])
nchar(split[20])
split[10]
split
unlist(split)
unlist(split)[10]
split <- unlist(split)
nchar(split[10])
nchar(split[20])
split[1]
split[9]
nchar(split[9])
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/"))
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = ""))
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "*"))
text <- html_text(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "*")
text <- html_text(read_html("http://biostat.jhsph.edu/~jleek/contact.html"))
read_html("http://biostat.jhsph.edu/~jleek/contact.html")
as.character(read_html("http://biostat.jhsph.edu/~jleek/contact.html"))
text <- as.character(read_html("http://biostat.jhsph.edu/~jleek/contact.html"))
split <- strsplit(text, '\n')
split <- unlist(split)
split[10]
nchar(split[10])
nchar(split[9])
nchar(split[10])
nchar(split[20])
nchar(split[30])
nchar(split[100])
split <- strsplit(text, '\r\n')
split <- unlist(split)
nchar(split[10])
nchar(split[100])
split <- strsplit(text, '\n')
split <- unlist(split)
class(split)
split <- strsplit(text, '\n')
strsplit(text)
strsplit(text, '\r')
text <- as.character(read_html("http://biostat.jhsph.edu/~jleek/contact.html"))
text[2]
text[1]
class(text)
unlist(text)
unlist(text)[2]
split <- unlist(strsplit(text, '\n'))
split[1]
split[2]
split[3]
nchar(split[3])
nchar(split[10])
nchar(split[20])
nchar(split[30])
nchar(split[100])
length(split[100])
split[100]
nchar(split[5])
nchar(split[6])
lapply(split, nchar)
count <- lapply(split, nchar)
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "html/"))
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "html"))
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html"))
class(text)
split <- unlist(strsplit(text, '\n'))
nchar(split[10])
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/"))
text <- html_text(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/head"))
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/head")
as.character(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/head"))
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/head")
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/")
html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html")
as.character(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html"))
text <- as.character(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/html"))
split <- unlist(strsplit(text, '\n'))
nchar(split[10])
split[0]
split[1]
split[2]
count <- lapply(split, nchar)
nchar(split[6])
nchar(split[16])
nchar(split[7])
nchar(split[17])
text <- as.character(html_nodes(read_html("http://biostat.jhsph.edu/~jleek/contact.html"), xpath = "/"))
split <- unlist(strsplit(text, '\n'))
nchar(split[10])
nchar(split[9])
nchar(split[8])
nchar(split[7])
nchar(split[6])
nchar(split[5])
nchar(split[4])
nchar(split[3])
split[4]
split[5]
nchar(split[5])
split[10]
split <- unlist(strsplit(text, '\n', fixed = TRUE))
split <- unlist(strsplit(text, '\n', fixed = TRUE))
split[2]
split[3]
text
write(text, "check.html")
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths=c(16, 4, 9))
read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(16, 4, 9))
read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(16, 4, 4, 9, 4, 9, 4, 9, 4))
for <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(16, 4, 4, 9, 4, 9, 4, 9, 4))
for <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(16, 4, 4, 9, 4, 9, 4, 9, 4))
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(16, 4, 4, 9, 4, 9, 4, 9, 4))
d[, v4]
d[, 4]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(9, 4, 4, 9, 4, 9, 4, 9, 4))
d
d[, 1]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(9, 9, 4, 9, 4, 9, 4, 9, 4))
d[, 2]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(9, 8, 4, 9, 4, 9, 4, 9, 4))
d[, 2]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(9, 9, 4, 9, 4, 9, 4, 9, 4))
d[, 2]
as.numeric(d[, 2])
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(16, 9, 4, 9, 4, 9, 4, 9, 4))
d[, 1]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(15, 9, 4, 9, 4, 9, 4, 9, 4))
d[, 1]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(15, 4, 4, 9, 4, 9, 4, 9, 4))
d[, 2]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(15, 4))
d[, 2]
d <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", widths=c(15, 4, 4, 9))
d[, 2]
d[, 3]
d[, 4]
as.numeric(d[, 4])
d[, 4]
class(d[, 4])
d[1, 4]
d[2, 4]
d[, 4][1]
d[[4]]
class(d[[4]])
as.numeric(d[[4]])
levels(d[, 4])
as.numeric(levels(d[, 4]))
values <- as.numeric(levels(d[, 4]))
values[!is.na(values)]
sum(values)
sum(values[!is.na(values)])
values[!is.na(values)]
length(values[!is.na(values)])
levels(d[, 4])
d[, 4]
class(d[, 4])
class(as.list(d[, 4]))
as.list(d[, 4])
d[, 4]
d[4]
values <- as.numeric(levels(d[4]))
values
values <- as.numeric(d[4])
d[4]
class(d[4])
d[4][as.numeric]
d[4][as.numeric(d[4])]
numbers <- d[4]
class(numbers)
numbers[1]
class(numbers[1])
numbers[, 1]
class(numbers[, 1])
ncol(numbers)
nrow(numbers)
class(numbers[1])
class(numbers$V4)
numbers$V4
as.numeric(numbers$V4)
x <- as.numeric(numbers$V4)
as.numeric(numbers$V4)
numbers$V4[1]
numbers$V4[555]
numbers
as.list(numbers)
length(as.list(numbers))
x <- as.list(numbers)
x <- unlist(x)
colSums(numbers$V4)
colSums(numbers)
numbers
class(numbers)
class(numbers$V4)
class(numbers[1])
class(numbers[, 1])
as.numeric(levels(numbers))[numbers]
numbers <- d[, 4]
as.numeric(levels(numbers))[numbers]
numbers <- as.numeric(levels(numbers))[numbers]
sum(numbers, na.rm = TRUE)
sample(1:5)
sample(1:5)
sample(1:5)
sample(1:5)
